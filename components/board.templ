package components

import (
	"gokanban/structs/board"
	"gokanban/structs/project"
	"gokanban/structs/column"
	"fmt"
	"strconv"
	"gokanban/structs/projectitem"
	"gokanban/structs/selectitem"
)

templ Kanban(p project.ProjectViewModel) {
	<!DOCTYPE html>
	<html>
		<head>
			<link rel="stylesheet" href="/static/style.css"/>
			<script src="/static/htmx.min.js"></script>
			<meta name="htmx-config" content='{"globalViewTransitions":"true"}'/>
		</head>
		<body hx-boost="true">
			@Boards(p)
		</body>
	</html>
}

templ Boards(p project.ProjectViewModel) {
	<main>
		<a href="/">Tilbake til start</a>
		<h1>{ p.Title }</h1>
		<div class="boards">
			for _, b := range p.Boards {
				@Board(b)
			}
		</div>
	</main>
}

templ Board(b board.BoardViewModel) {
	<details open?={ true } class="board" id={ "board-" + b.Id }>
		<summary class="board_summary">
			{ b.Title }
		</summary>
		<div class="details_content">
			<div class="board_toolbar">
				<label for="board-search">Filtrer saker: </label>
				<input
					type="search"
					id="board-search"
					name="q"
					hx-get={ fmt.Sprintf("/project/%s/board", b.ProjectId) }
					hx-trigger="keyup changed delay:400ms"
					hx-target={ fmt.Sprintf("#board_columns-%s", b.Id) }
					hx-select={ fmt.Sprintf("#board_columns-%s", b.Id) }
					hx-push-url="true"
					hx-swap="outerHTML"
				/>
			</div>
			<ol class="columns" id={ fmt.Sprintf("board_columns-%s", b.Id) }>
				for i, col := range b.Columns {
					<li>
						@Column(col, i)
					</li>
				}
			</ol>
		</div>
	</details>
}

templ Column(col column.ColumnViewModel, i int) {
	<div class={ getColumnStyle(col) }>
		<div class="column_top">
			<h3 class="column_header">{ col.Title }</h3>
			if i == 0 {
				<button 
					id="projectitem_create"
					hx-get={fmt.Sprintf("/board/%s/columns/%s/projectitem/new", col.BoardId, col.Id)} 
					hx-swap="beforeend" 
					hx-target="next ol"
					hx-on::after-request="this.disabled = true;">
					@Plus()
				</button>
			}
		</div>
		<div
			class="counter"
			hx-get={ fmt.Sprintf("/column/%s/count", col.Id) }
			hx-trigger={ fmt.Sprintf("column-updated-%s from:body", col.Id) }
		>
			@Counter(strconv.Itoa(len(col.ProjectItems)))
		</div>
		<ol
			class="projectitems_list"
			hx-trigger={ fmt.Sprintf("column-updated-%s from:body", col.Id) }
			hx-get={ fmt.Sprintf("/board/%s/columns/%s/items", col.BoardId, col.Id) }
		>
			@ProjectItems(col, i)
		</ol>
	</div>
}

templ ProjectItems(col column.ColumnViewModel, i int) {
	for _, p := range col.ProjectItems {
		@ProjectItem(p, col.BoardId)
	}
}

templ UpdatedProjectItems(items []projectitem.ProjectItemViewModel, boardid string) {
	for _, p := range items {
		@ProjectItem(p, boardid)
	}
}

templ ProjectItem(p projectitem.ProjectItemViewModel, boardid string) {
	<div class="projectitem" id={ "projectitem-" + p.Id }>
		<h3>{ p.Title }</h3>
		if len(p.Description) > 0 {
			<p>{ p.Description }</p>
		}
		<p>Time estimated: { p.EstimatedTime }</p>
		<p>Time spent: { p.SpentTime }</p>
		<div class="projectitem_toolbar">
			@DeleteIcon(fmt.Sprintf("/board/%s/columns/%s/projectitem/%s", boardid, p.ColumnId, p.Id), "delete", fmt.Sprintf("#projectitem-%s", p.Id))
			@EditIcon(fmt.Sprintf("/board/%s/projectitem/%s/edit", boardid, p.Id), "outerHTML", fmt.Sprintf("#projectitem-%s", p.Id))
		</div>
	</div>
}

templ CreateProjectItem(p projectitem.ProjectItemViewModel, boardid string, validations map[string][]string) {
	<form class="projectitem" 
		hx-post={ fmt.Sprintf("/board/%s/columns/%s/projectitem/new", boardid, p.ColumnId) } 
		hx-swap="outerHTML" 
		hx-on::after-request="htmx.find('#projectitem_create').disabled = false;"
	>
		Tittel: <input 
	type="text"
	name="title"
	value={ p.Title }
	hx-get="/validate/title"
	hx-target="next .errors"
	hx-swap="innerHTML"
	hx-trigger="keyup delay:300ms changed"
/>
		@ErrorList(validations["title"])
		Beskrivelse: 
		<textarea
			name="description"
			cols="10"
			rows="5"
			hx-get="/validate/description"
			hx-target="next .errors"
			hx-swap="innerHTML"
			hx-trigger="keyup delay:300ms changed"
		>
			{ p.Description }
		</textarea>
		@ErrorList(validations["description"])
		Estimert tidsbruk: <input
	type="number"
	name="estimatedtime"
	value={ p.EstimatedTime }
	hx-get="/validate/estimatedtime"
	hx-target="next .errors"
	hx-swap="innerHTML"
	hx-trigger="keyup delay:300ms changed"
/>
		@ErrorList(validations["estimatedtime"])
		<button type="submit">Opprett</button>
	</form>
}

templ EditProjectItem(p projectitem.ProjectItemViewModel, boardid string, validations map[string][]string, options []selectitem.Selectitem) {
	<form
		class="projectitem"
		id={ "editprojectitem-" + p.Id }
		hx-put={ fmt.Sprintf("/board/%s/projectitem/%s/edit", boardid, p.Id) }
		hx-swap="outerHTML"
		hx-target={ "#board-" + boardid }
	>
		Tittel: <input
	type="text"
	name="title"
	value={ p.Title }
	hx-get="/validate/title"
	hx-target="next .errors"
	hx-swap="innerHTML"
	hx-trigger="keyup delay:300ms changed"
/>
		@ErrorList(validations["title"])
		Beskrivelse: 
		<textarea
			name="description"
			cols="10"
			rows="5"
			hx-get="/validate/description"
			hx-target="next .errors"
			hx-swap="innerHTML"
			hx-trigger="keyup delay:300ms changed"
		>
			{ p.Description }
		</textarea>
		@ErrorList(validations["description"])
		Estimert tidsbruk: <input
	type="number"
	name="estimatedtime"
	value={ p.EstimatedTime }
	hx-get="/validate/estimatedtime"
	hx-target="next .errors"
	hx-swap="innerHTML"
	hx-trigger="keyup delay:300ms changed"
/>
		@ErrorList(validations["estimatedtime"])
		Tid brukt: <input
	type="number"
	name="spenttime"
	value={ p.SpentTime }
	hx-get="/validate/spenttime"
	hx-target="next .errors"
	hx-swap="innerHTML"
	hx-trigger="keyup delay:300ms changed"
/>
		@ErrorList(validations["spenttime"])
		Status: 
		<select name="columnid">
			for _, v := range options {
				if v.Value == p.ColumnId {
					<option value={ v.Value } selected>{ v.Label }</option>
				} else {
					<option value={ v.Value }>{ v.Label }</option>
				}
			}
		</select>
		@ErrorList(validations["columnid"])
		<input type="hidden" name="boardid" value={ boardid }/>
		<div class="projectitem_editbuttons">
			<button type="submit">Oppdater</button>
			<button
				hx-get={ fmt.Sprintf("/board/%s/columns/%s/projectitem/%s", boardid, p.ColumnId, p.Id) }
				hx-swap="outerHTML"
				hx-target={ "#editprojectitem-" + p.Id }
			>
				Avbryt
			</button>
		</div>
	</form>
}

func getColumnStyle(c column.ColumnViewModel) string {
	switch c.ColumnType {
	case 0:
		return "column column_nil"
	case 1:
		return "column column_one"
	default:
		return "column column_two"
	}
}

templ ErrorList(values []string) {
	<ul class="errors">
		@DisplayErrors(values)
	</ul>
}
